// OOP Overloading increment and decrement (++ and --).cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
using namespace std;

class Point
{
    int x;
    int y;

public:

                                        // Конструкторы
    // Конструктор по умолчанию
    Point()
    {
        x = 0;
        y = 0;
        cout << this << " Конструктор по умолчанию " << endl;
    }
    // Конструктор объекта с переданными значениями
    Point(int x, int y)
    {
        this->x = x;
        this->y = y;
        cout << this << " Конструктор по параметрам " << endl;
    }

                                        // Методы
    void Show()
    {
        cout << "X = " << x << "\t" << "Y = " << y << endl;
    }

                                        // Перегрузки операторов
            // Перегрузки инкриментов
    // Перегрузка префиксного инкримента
    Point& operator ++() // Будем возвращать ссылку на объект, для которого вызван оператор
    {
        /*this->*/x++; // =  += 1, можно использовать короткий вариант слева, т.к. операция
        this->y += 1; // инкримента уже описана для целочисленных типов данных

        return *this;
    }

    // Перегрузка постфиксного инкримента

    // Данная перегрузка будет принимать int переменную,
        // но на самом деле мы её никогда передавать сюда не будем.
        // Это необходимо только для того, чтобы компилятор отличал перегрузку постфиксного
        // инкримента от префиксного инкримента
    Point& operator ++(int value) 
    {
        // Данная запись создаёт объект с такими же значениями полей, как и объект,
        // для которого вызвана данная перегрузка
        Point temp = (*this);

        // Изменяем поля объекта, для которого вызван данный метод
        this->x++;
        this->y++;

        // Возвращаем старую (не изменённую версию объекта)
        return temp;
    }

        // Перегрузки декриментов

    // Перегрузка префиксного декримента
    Point& operator --()
    {
        this->x--;
        this->y--;

        return *this;
    }

    // Перегрузка постфиксного декримента
    Point& operator --(int value)
    {
        Point temp = (*this);

        this->x--;
        this->y--;

        return temp;
    }


    ~Point()
    {
        cout << this << " Деструктор по умолчанию " << endl;
    }

};

int main()
{
    setlocale(0, "rus");
    cout << "Работа префиксного инкримента над объектом a:" << endl;
    Point a;
    cout << "Объект а до применения префиксного инкримента" << endl;
    a.Show();
    ++a; // Почему ошибка при вызове метода a.operator++;
    cout << "Объект а после применения префиксного инкримента" << endl;
    a.Show();

    cout << endl << endl << endl;

    cout << "Работа постфиксного инкримента на примере изменения объекта b объектом с:" << endl;
    Point b;
    Point c;

    cout << "Объект b до изменения объектом с с постфиксным инкриментом: " << endl;
    b.Show();
    b = c++;
    cout << "Объект b после изменения объектом с с постфиксным инкриментом: " << endl;
    b.Show();

    cout << endl;
    cout << "_______________________________________________________________________" << endl;
    cout << endl;

    cout << "Разрушаем объекты для их повторного использования " << endl;
    a.~Point();
    b.~Point();
    c.~Point();

    cout << "Работа префиксного декремента над объектом a: " << endl;
    Point a;
    cout << "Объект а до применения префиксного декремента: " << endl;
    a.Show();
    --a;
    cout << "Объект а после применения префиксного декремента:" << endl;
    a.Show();

    cout << endl << endl << endl;

    cout << "Работа постфиксного декремента на примере изменения объекта b объектом с:" << endl;
    Point b;
    Point c;

    cout << "Объект b до изменения объектом с с постфиксным декрементом: " << endl;
    b.Show();
    b = c--;
    cout << "Объект b после изменения объектом с с постфиксным декрементом: " << endl;
    b.Show();

    return 0;
}
